module fir_csr(
  input logic clk,
  input logic rst_n,
  input logic chipselect,
  input logic write,           
  input logic read,           
  input logic [3:0] address,   
  input logic [31:0] writedata,
  input logic [17:0] dout,
  input logic status,
  output logic control ,
  output logic [31:0] readdata
);
  reg [7:0] store [7:0];
  reg [31:0] data_reg;
  assign readdata = data_reg;
  
  always @(posedge clk or posedge write or negedge rst_n) begin
    if(rst_n == 1'b0) begin
      for(int i = 0; i<8 ; i++) begin
        store[i] <= 8'b0;
      end
    end 
    else if(chipselect & write & status) begin
     case (address)
      4'd0: begin store[0] <= writedata[7:0];  end
      4'd1: begin store[1] <= writedata[7:0];  end
      4'd2: begin store[2] <= writedata[7:0];  end
      4'd3: begin store[3] <= writedata[7:0];  end
      4'd4: begin store[4] <= writedata[7:0];  end
      4'd5: begin store[5] <= writedata[7:0];  end
      4'd6: begin store[6] <= writedata[7:0];  end
      4'd7: begin store[7] <= writedata[7:0];  end
       default: begin 
       for(int i = 0; i<8 ; i++) begin
         store[i] <= store[i];
      end
       end   
     endcase
  end else begin
  		for(int i = 0; i<8 ; i++) begin
         store[i] <= store[i];
      end
  end
 end 
  
  
  
  always @(posedge clk or posedge read or negedge rst_n) begin
    if(rst_n == 1'b0) begin
        data_reg <= 32'h0;
      	control <= 1'b0;
    end else if(chipselect & read) begin
      case(address) 
        4'd0: data_reg <= {24'b0,store[0]} ;
        4'd1: data_reg <= {24'b0,store[1]} ;
        4'd2: data_reg <= {24'b0,store[2]} ;
        4'd3: data_reg <= {24'b0,store[3]} ;
        4'd4: data_reg <= {24'b0,store[4]} ;
        4'd5: data_reg <= {24'b0,store[5]} ;
        4'd6: data_reg <= {24'b0,store[6]} ;
        4'd7: data_reg <= {24'b0,store[7]} ;
        4'd8: 
          begin
          	control <= 1'b1;
            data_reg <= {14'b0,dout};
          end
      default: data_reg <= 32'h0;
      endcase
    end else begin
    	data_reg <= data_reg;
      	control <= 1'b0;
    end
  end
  
endmodule