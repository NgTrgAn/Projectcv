#include <stdio.h>
#include "system.h"

#define FIR_CSR_BASE 0x00041040
#define FIR_CSR_SPAN 64

// Define specific offsets for the CSR registers
#define FIR_CSR_CONTROL_OFFSET 0x00
#define FIR_CSR_STATUS_OFFSET  0x04
#define FIR_CSR_DIN_OFFSET(n)  (0x08 + (n) * 4)  // Assuming 4-byte aligned addresses
#define FIR_CSR_DOUT_OFFSET    0x20

volatile unsigned int* fir_csr = (volatile unsigned int*) FIR_CSR_BASE;

void write_to_fir_csr(int offset, unsigned int value) {
    fir_csr[offset / 4] = value;  // Divide by 4 to convert byte offset to word offset
}

unsigned int read_from_fir_csr(int offset) {
    return fir_csr[offset / 4];  // Divide by 4 to convert byte offset to word offset
}

int main() {
    unsigned int data;

    // Write to the control register
    write_to_fir_csr(FIR_CSR_CONTROL_OFFSET, 0x1);

    // Write to the data input registers
    for (int i = 0; i < 8; i++) {
        write_to_fir_csr(FIR_CSR_DIN_OFFSET(i), i + 1);  // Write sample data
    }

    // Read from the data output register
    data = read_from_fir_csr(FIR_CSR_DOUT_OFFSET);
    printf("Data output: %u\n", data);

    // Read the status register
    data = read_from_fir_csr(FIR_CSR_STATUS_OFFSET);
    printf("Status: %u\n", data);

    return 0;
}
